// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map(name: "sessions")
  @@index([userId])
}

model User {
  id String    @id @default(cuid())
  name String?
  email String?   @unique
  emailVerified DateTime?
  image String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  accounts Account[]
  sessions Session[]
  invoices Invoice[]
  clients Client[]
  stripeCustomerId String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token String   @unique
  expires DateTime
  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Invoice {
  id String @id @default(cuid())
  number Int  @unique @default(autoincrement())
  userId String
  clientId String?

  published Boolean  @default(false)
  status InvoiceStatus @default(PENDING)
  dueDate DateTime @default(now()) @map(name: "due_date")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@index([userId])
  @@index([clientId])

  @@map(name: "invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

model Client {
  id String @id @default(cuid())
  userId String
  firstname String
  lastname String
  isCompany Boolean @default(false)
  companyName String
  email String
  phone String
  street String
  postCode String
  city String
  country String
  invoices Invoice[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map(name: "clients")
}